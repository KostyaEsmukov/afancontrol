[daemon]
# Default: /run/afancontrol.pid
pidfile = /run/afancontrol.pid

# Default: (empty value)
logfile = /var/log/afancontrol.log

# The ticks interval in seconds. Tick is a single operation of retrieving
# temperature values from the sensors and setting the computed fan speeds.
# Default: 5
interval = 5

# Hddtemp location. Relevant only when there're `type = hdd` temperature sensors.
# Default: hddtemp
;hddtemp = /usr/local/bin/hddtemp

# Prometheus exporter listening hostname and TCP port.
# Default: (empty value)
;exporter_listen_host = 127.0.0.1:8083

[actions]
# Temperature sensors have 2 limits: `threshold` and `panic` temperature.
# When any of the sensors reach their `threshold` value, the `threshold` mode
# is activated. Same for the `panic` mode.
#
# When any of the 2 modes is activated, all of the available fans would start
# working at full speed.
#
# In the default configuration there's no difference between the two modes.
# But it is possible to call different shell commands for each mode, which
# would allow to make different things. For example, in `threshold` mode
# you could stop some services which produce significant load, and in `panic`
# mode you could stop even more (if that didn't help to lower the temperatures).

# Shell command which will be used to report important events.
# %REASON% will be replaced with report reason, %MESSAGE% with report message
# Examples:
#  printf "Reason: %s\nMessage: %s" "%REASON%" "%MESSAGE%" | wall
#  kdialog --title "afancontrol report" --error "Reason: %REASON%\nMessage: %MESSAGE%"
# Default: printf "Subject: %s\nTo: %s\n\n%b" "afancontrol daemon report: %REASON%" root "%MESSAGE%" | sendmail -t
;report_cmd =

# Global panic enter shell command
# Default: (empty value)
;panic_enter_cmd =

# Global panic leave shell command
# Default: (empty value)
;panic_leave_cmd =

# Global threshold enter shell command
# Default: (empty value)
;threshold_enter_cmd =

# Global threshold leave shell command
# Default: (empty value)
;threshold_leave_cmd =


# [temp:name] - is a temperature sensor section. The `name` must be unique.
[temp:mobo]
# Type of the sensor.
# Possible values:
#  `file`: Read files like /sys/class/hwmon/hwmon0/device/temp1_input.
#          These files contain temperature in Celsius multiplied by 1000.
#  `hdd`: Query temperatures from HDD using `hddtemp`. If multiple drives
#         are specified (with a glob pattern), the sensor would report
#         the maximum temperature among all matched devices.
#  `exec`: Shell command which will return temperature in Celsius
#          (which might be float). Output might also contain
#          the `min` and `max` temperatures separated by a newline.
# This field is mandatory.
type = file

# Shell command which will return a temperature.
# Mandatory for the `type = exec`.
;command = nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader,nounits -i 0
;command = nvme smart-log /dev/nvme0 | grep "^temperature" | grep -oP '[0-9]+'
;command = iStats cpu temp --value-only

# When `type = file`: this is the path to the file.
# When `type = hdd`: this is the path to the target device (might be a glob pattern)
# Mandatory when `type` equals to `file` or `hdd`.
path = /sys/class/hwmon/hwmon0/device/temp1_input
;path = /dev/sd?

# Temperature at which a fan should be running at minimum speed
# Must be set for `hdd`. Can be detected automatically for `file`
# and `exec` (but not always).
min = 30

# Temperature at which a fan should be running at full speed
# Must be set for `hdd`. Can be detected automatically for `file`
# and `exec` (but not always).
max = 40

# Temperature at which this sensor will enter the panic mode
# Default: (empty value)
;panic =

# Temperature at which this sensor will enter the threshold mode
# Default: (empty value)
;threshold =

# Sensor panic enter shell command
# Default: None
;panic_enter_cmd =

# Sensor panic leave shell command
# Default: None
;panic_leave_cmd =

# Sensor threshold enter shell command
# Default: None
;threshold_enter_cmd =

# Sensor threshold leave shell command
# Default: None
;threshold_leave_cmd =


# [fan:name] - is a PWM fan section. The `name` must be unique.
[fan: hdd]
# Type of the fan.
# Possible values:
#   `linux`: The default fan type. This is a fan connected to
#            the motherboard using a 4-pin connector and exposed by lm-sensors
#            as a file like `/sys/class/hwmon/hwmon0/device/pwm2`.
#   `arduino`: A PWM fan connected via an Arduino board.
# Default: linux
type = linux

# Path to the PWM file of the fan.
# Mandatory when `type = linux`.
pwm = /sys/class/hwmon/hwmon0/device/pwm2

# Path to the RPM file of the fan.
# Mandatory when `type = linux`.
fan_input = /sys/class/hwmon/hwmon0/device/fan2_input

# Arduino board name as described by an `[arduino: name]` section.
# Mandatory when `type = arduino`.
;arduino_name = mymicro

# The pin of the Arduino board where the PWM wire is connected to
# (usually the blue one).
# Mandatory when `type = arduino`.
;pwm_pin = 9

# The pin of the Arduino board where the Tachometer wire is connected to
# (usually the yellow one).
# Mandatory when `type = arduino`.
;tacho_pin = 3

# Some fans have almost linear correlation between PWM and RPM, some haven't.
# `pwm_line_start` is the PWM value where the linear correlation starts,
# `pwm_line_end` is where it ends.
# You can use the `afancontrol fantest` command to run a test which would
# allow you to find out these values your your specific fans.
#
# Default: 100
pwm_line_start = 100
# Default 240
pwm_line_end = 240

# Should the fan be stopped on speed 0% or not. If not, it would be running
# with the `pwm_line_start` PWM value.
# Default: yes
never_stop = no


# [arduino:name] - a section describing an Arduino board with PWM fans connected to it.
;[arduino: mymicro]
# The Serial interface url.
# Mandatory.
;serial_url = /dev/ttyACM0

# The Serial interface Baudrate.
# Default: 115200
;baudrate = 115200

# The Status command timeout in seconds. The board periodically sends
# a Status command -- the current RPM and PWM values. When the status
# haven't been received for that amount of time, the corresponding fans
# would be considered failing.
# Default: 5
;status_ttl = 5


# Relationships between fans and temps
[mapping:1]
# Comma-separated list of fans for this mapping. Fan names might be
# multiplied by float, e.g. `name * 0.55`. This means that the speed
# for that fan will be just 55% when the specified temperatures would be
# at their `max` value.
#
# You may want to apply a multiplier if the fan is far from
# the corresponding temperature sensors.
#
# Multiple mappings can be specified, each temp and fan might be used
# in different mappings multiple times.
#
# The resulting fan speed would be the maximum value calculated along
# all mappings.

# Comma-separated list of fans with modifiers.
# Example: `fans = myfan, myfan2 * 0.6, myfan3`.
# Mandatory.
fans = hdd*0.6

# Comma-separated list of temp sensors.
# Mandatory.
temps = mobo
